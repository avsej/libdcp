CMAKE_MINIMUM_REQUIRED(VERSION 2.8.9)
PROJECT(libdcp)

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
IF("${isSystemDir}" STREQUAL "-1")
  SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
ENDIF("${isSystemDir}" STREQUAL "-1")

SET(LDCP_GENSRCDIR ${PROJECT_BINARY_DIR}/generated)
INCLUDE_DIRECTORIES(${LDCP_GENSRCDIR})
SET(LDCP_GENINFODIR ${PROJECT_SOURCE_DIR}/packaging/distinfo)

INCLUDE(cmake/Modules/GetLibcouchbaseFlags.cmake)
INCLUDE(cmake/Modules/FindCouchbaseLibevent.cmake)
INCLUDE(cmake/Modules/GetPlatformCCInfo.cmake)
INCLUDE(cmake/Modules/GetVersionInfo.cmake)
INCLUDE(CheckIncludeFiles)
INCLUDE(cmake/source_files.cmake)

IF(LIB_INSTALL_DIR)
  SET(CMAKE_INSTALL_LIBDIR "${LIB_INSTALL_DIR}")
ENDIF()
IF(NOT LDCP_USE_ARCHLIBDIR AND NOT CMAKE_INSTALL_LIBDIR)
  SET(CMAKE_INSTALL_LIBDIR "lib")
ENDIF()
INCLUDE(GNUInstallDirs)


SET(CPACK_PACKAGE_VERSION_MAJOR "${LDCP_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${LDCP_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${LDCP_VERSION_PATCH}")
IF(NOT CMAKE_BUILD_TYPE)
  SET(CPACK_INSTALL_SCRIPT
    "${PROJECT_SOURCE_DIR}/cmake/Modules/DistScript.cmake")
ENDIF()
SET(ldcp_package_name "libdcp-${LDCP_VERSION}_${LDCP_ARCH_STRING}_${LDCP_CC_STRING}")
SET(CPACK_PACKAGE_FILE_NAME ${lcb_package_name})

IF(WIN32)
  SET(CPACK_GENERATOR "ZIP")
ELSE()
  SET(CPACK_GENERATOR "TXZ")
ENDIF()

INCLUDE(CPack)

CONFIGURE_FILE(
  ${PROJECT_SOURCE_DIR}/include/libdcp/configuration.h.in
  ${LDCP_GENSRCDIR}/libdcp/configuration.h
  @ONLY)

CONFIGURE_FILE(
  ${PROJECT_SOURCE_DIR}/cmake/defs.mk.in
  ${PROJECT_BINARY_DIR}/defs.mk)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
IF(WIN32)
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
ELSE()
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
ENDIF()

SET(SOURCE_ROOT ${PROJECT_SOURCE_DIR})

INCLUDE_DIRECTORIES(BEFORE ${SOURCE_ROOT}/include
  ${SOURCE_ROOT}/src
  ${SOURCE_ROOT})

MACRO(LDCP_UTIL tgt)
  SET_TARGET_PROPERTIES(${tgt}
    PROPERTIES
    COMPILE_FLAGS "${LDCP_CORE_CFLAGS}"
    POSITION_INDEPENDENT_CODE TRUE)
ENDMACRO()

ADD_LIBRARY(ldcpcore OBJECT ${LDCP_CORE_SRC})
SET_TARGET_PROPERTIES(ldcpcore PROPERTIES
  COMPILE_FLAGS "${LDCP_CORE_CXXFLAGS}"
  POSITION_INDEPENDENT_CODE TRUE)

SET(LDCP_CORE_OBJS
  $<TARGET_OBJECTS:ldcpcore>)

ADD_LIBRARY(dcp SHARED ${LDCP_CORE_OBJS})

IF(NOT APPLE)
  SET_TARGET_PROPERTIES(dcp PROPERTIES
    SOVERSION "${LDCP_SONAME_MAJOR}" VERSION "${LDCP_SONAME_FULL}")
ENDIF()


SET_TARGET_PROPERTIES(dcp PROPERTIES PREFIX "lib")
SET_TARGET_PROPERTIES(dcp PROPERTIES IMPORT_PREFIX "lib")
SET(LDCP_LINK_DEPS "")
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  SET(LDCP_LINK_DEPS ${LDCP_LINK_DEPS} rt)
ENDIF()

TARGET_LINK_LIBRARIES(dcp ${LDCP_LINK_DEPS})

ADD_SUBDIRECTORY(tools tools)
INSTALL(TARGETS dcp
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
INSTALL(DIRECTORY include/libdcp ${LDCP_GENSRCDIR}/libdcp
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILES_MATCHING PATTERN *.h)

SET(_ldcp_tarname "libdcp-${LDCP_VERSION}")
SET(_ldcp_manifest "${LDCP_GENINFODIR}/MANIFEST")

ADD_CUSTOM_TARGET(uninstall
  COMMAND xargs rm -vf < ${CMAKE_CURRENT_BINARY_DIR}/install_manifest.txt)

ADD_CUSTOM_TARGET(file_manifest
  COMMAND sh -c 'test -e ${_lcb_manifest} || git ls-files > ${_lcb_manifest}'
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})

ADD_CUSTOM_TARGET(dist
  COMMAND rm -rf "${_ldcp_tarname}"
  COMMAND mkdir "${_ldcp_tarname}"
  COMMAND tar -cf - -C ${PROJECT_SOURCE_DIR} -T ${_ldcp_manifest} | tar xf - -C "${_ldcp_tarname}"
  COMMAND cp -a "${LDCP_GENINFODIR}" "${_ldcp_tarname}/packaging"
  COMMAND tar -czf "${_ldcp_tarname}.tar.gz" "${_ldcp_tarname}"
  COMMAND rm -rf "${_ldcp_tarname}"
  DEPENDS file_manifest)

INCLUDE(GenerateExportHeader)
GENERATE_EXPORT_HEADER(dcp
  EXPORT_MACRO_NAME LDCP_PUBLIC_API
  EXPORT_FILE_NAME ${PROJECT_SOURCE_DIR}/include/libdcp/visibility.h)

# Generate our configuration file _after_ we've collected everything
INCLUDE(cmake/Modules/GenerateConfigDotH.cmake)

# Build any local tests/scripts
IF (EXISTS ${SOURCE_ROOT}/tests/LOCAL)
  ADD_SUBDIRECTORY(${SOURCE_ROOT}/tests/LOCAL)
ENDIF()
